from __future__ import annotations
import argparse, math
from pathlib import Path
from typing import Optional, Dict
import pandas as pd

def _safe(df: Optional[pd.DataFrame]) -> pd.DataFrame:
    return df if isinstance(df, pd.DataFrame) else pd.DataFrame()

def _upp(x: pd.Series) -> pd.Series:
    return x.astype(str).str.upper()

def _nz(s: pd.Series, val=0.0) -> pd.Series:
    return s.fillna(val)

def _try_import_nfl() -> Optional[object]:
    try:
        import nfl_data_py as nfl
        return nfl
    except Exception:
        return None

def _read_csv(path: str) -> pd.DataFrame:
    p = Path(path)
    if p.exists() and p.stat().st_size > 0:
        try: return pd.read_csv(p)
        except Exception: pass
    return pd.DataFrame()

def load_nflverse_team(season: int) -> Dict[str, pd.DataFrame]:
    nfl = _try_import_nfl()
    out = {"pbp": pd.DataFrame(), "weekly": pd.DataFrame()}
    if not nfl: return out
    try:
        out["pbp"] = nfl.import_pbp_data(years=[season])
    except Exception: pass
    try:
        out["weekly"] = nfl.import_weekly_data(years=[season])
    except Exception: pass
    return out

def load_espn_team(season: int) -> pd.DataFrame:   return _read_csv("data/team_form_espn.csv")
def load_nflgsis_team(season: int) -> pd.DataFrame:return _read_csv("data/team_form_nflgsis.csv")
def load_msf_team(season: int) -> pd.DataFrame:    return _read_csv("data/team_form_msf.csv")
def load_apisports_team(season: int) -> pd.DataFrame:return _read_csv("data/team_form_apisports.csv")

def build_from_nflverse(season: int) -> pd.DataFrame:
    b = load_nflverse_team(season)
    pbp = _safe(b.get("pbp")); weekly = _safe(b.get("weekly"))

    for col in ("posteam","defteam","recent_team","team"):
        if col in pbp.columns: pbp[col] = _upp(pbp[col])

    if not pbp.empty:
        df = pbp[["defteam","epa","pass","rush","sack","qb_dropback"]].copy()
        df["is_pass"] = _nz(df.get("pass",0).astype(float),0.0) > 0
        df["is_rush"] = _nz(df.get("rush",0).astype(float),0.0) > 0
        pass_epa = df[df["is_pass"]].groupby("defteam")["epa"].mean().rename("def_pass_epa")
        rush_epa = df[df["is_rush"]].groupby("defteam")["epa"].mean().rename("def_rush_epa")
        df["is_db"] = (_nz(df.get("pass"),0)>0) | (_nz(df.get("qb_dropback"),0)>0)
        df["is_sack"] = _nz(df.get("sack"),0) > 0
        sack_rate = (df.groupby("defteam")["is_sack"].sum() / df.groupby("defteam")["is_db"].sum()).replace([math.inf,-math.inf],0).fillna(0).rename("def_sack_rate")
    else:
        pass_epa = pd.Series(dtype="float64"); rush_epa = pd.Series(dtype="float64"); sack_rate = pd.Series(dtype="float64")

    pace = pd.Series(dtype="float64"); proe = pd.Series(dtype="float64"); light_box = pd.Series(dtype="float64"); heavy_box = pd.Series(dtype="float64")
    if not weekly.empty:
        w = weekly.copy()
        for c in ("recent_team","team"):
            if c in w.columns: w[c] = _upp(w[c])
        team = w.get("recent_team") if "recent_team" in w.columns else w.get("team")
        w["team_u"] = _upp(team) if team is not None else ""
        pass_att = _nz(w.get("attempts"),0).groupby(w["team_u"]).sum().rename("pass_att")
        rush_att = _nz(w.get("rush_attempts"),0).groupby(w["team_u"]).sum().rename("rush_att")
        plays = (pass_att + rush_att).rename("plays")
        team_pr = (pass_att / (pass_att + rush_att).replace(0,pd.NA)).astype(float).fillna(0.55)
        league_pr = float(team_pr.mean()) if len(team_pr) else 0.55
        proe = (team_pr - league_pr).rename("proe")
        games = w.groupby("team_u")["week"].nunique() if "week" in w.columns else pd.Series(1, index=plays.index)
        pace = (plays / games.replace(0,1)).rename("pace")
        light_box = pd.Series(0.0, index=plays.index, name="light_box_rate")
        heavy_box = pd.Series(0.0, index=plays.index, name="heavy_box_rate")

    df = pd.DataFrame()
    for s in [pass_epa, rush_epa, sack_rate, pace, proe, light_box, heavy_box]:
        if isinstance(s, pd.Series) and len(s)>0:
            df = df.join(s, how="outer") if not df.empty else s.to_frame()
    df.index.name = "team"; df = df.reset_index()
    for col in ["team","def_pass_epa","def_rush_epa","def_sack_rate","pace","proe","light_box_rate","heavy_box_rate"]:
        if col not in df.columns: df[col] = 0.0 if col!="team" else ""
    df["team"] = _upp(df["team"]) 
    return df

def enrich_with_fallbacks(base: pd.DataFrame, *fallbacks: pd.DataFrame) -> pd.DataFrame:
    df = base.copy(); df["team"] = _upp(df["team"])
    need = ["team","def_pass_epa","def_rush_epa","def_sack_rate","pace","proe","light_box_rate","heavy_box_rate"]
    for fb in fallbacks:
        if fb is None or fb.empty or "team" not in fb.columns: continue
        fb = fb.copy(); fb["team"] = _upp(fb["team"])
        cols = [c for c in need if c in fb.columns]
        df = df.merge(fb[["team"]+cols], on="team", how="left", suffixes=("", "_fb"))
        for c in cols:
            df[c] = df[c].where(~df[c].isna(), df[f"{c}_fb"]); df.drop(columns=[f"{c}_fb"], inplace=True)
    for c in need:
        if c not in df.columns: df[c] = 0.0 if c!="team" else ""
    return df[need]

def main(season: int):
    Path("data").mkdir(parents=True, exist_ok=True); Path("outputs/metrics").mkdir(parents=True, exist_ok=True)
    base = build_from_nflverse(season)
    espn = load_espn_team(season); gsis=load_nflgsis_team(season); msf=load_msf_team(season); api=load_apisports_team(season)
    final = enrich_with_fallbacks(base, espn, gsis, msf, api)
    final.to_csv("data/team_form.csv", index=False); final.to_csv("outputs/metrics/team_form.csv", index=False)
    print(f"[make_team_form] ✅ rows={len(final)} → data/team_form.csv & outputs/metrics/team_form.csv")

if __name__=="__main__":
    ap=argparse.ArgumentParser(); ap.add_argument("--season", type=int, required=True); a=ap.parse_args(); main(a.season)
