name: Run pipeline

on:
  workflow_dispatch:
    inputs:
      date:
        description: "Logical date (YYYY-MM-DD or 'today')"
        required: true
        default: "today"
      season:
        description: "Season tag (e.g., 2025)"
        required: true
        default: "2025"
      window_hours:
        description: "Only price events starting within N hours (0 = no filter)"
        required: true
        default: "36"
      cap:
        description: "Hard cap on number of events to fetch (0 = no cap)"
        required: true
        default: "0"
      books:
        description: "Bookmakers (comma separated keys)"
        required: true
        default: "draftkings,fanduel,betmgm,caesars"
      markets:
        description: "Markets (comma separated keys)"
        required: true
        default: "spreads,totals,ml,player_props"
      strict:
        description: "Strict compose mode (0 = lenient fallbacks, 1 = fail if key columns missing)"
        required: true
        default: "0"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Plumb season/strict across steps
      SEASON: ${{ github.event.inputs.season }}
      STRICT: ${{ github.event.inputs.strict }}

      # Make secrets visible to Python fetchers (fallback providers)
      MSF_KEY:        ${{ secrets.MSF_KEY }}
      MSF_PASSWORD:   ${{ secrets.MSF_PASSWORD }}
      APISPORTS_KEY:  ${{ secrets.APISPORTS_KEY }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}
      THE_ODDS_API_KEY: ${{ secrets.THE_ODDS_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          echo "Repo root: $PWD"
          ls -la
          if [ -f requirements-extended.txt ]; then
            pip install -r requirements-extended.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "::warning::No requirements*.txt found; proceeding with installed environment."
          fi
          python -V
          pip -V

      - name: Show layout (debug)
        shell: bash
        run: |
          set -euo pipefail
          echo "== tree -L 3 =="
          (command -v tree >/dev/null 2>&1 && tree -L 3 || ls -R | sed -n '1,300p') || true

      # -----------------------------
      # FETCH RAW (multi-source)
      # -----------------------------
      - name: Fetch free data (nflverse + fallbacks)
        shell: bash
        run: |
          set -euo pipefail
          echo "[fetch_all] season=${SEASON}"
          if [ -f external/nflverse_bundle/fetch_all.py ]; then
            python external/nflverse_bundle/fetch_all.py --season "${SEASON}"
          else
            echo "::warning::external/nflverse_bundle/fetch_all.py not found; skipping raw fetch step."
          fi

      # -----------------------------
      # RUN ADDONS (optional)
      # -----------------------------
      - name: Run addons (if present)
        shell: bash
        run: |
          set -euo pipefail
          runp() { [ -f "$1" ] && echo ">> $1" && python "$1" --season "${SEASON}" || echo "skip $1"; }
          runp external/nflverse_bundle/addons/derive_proe.py
          runp external/nflverse_bundle/addons/aggregate_box_counts.py
          runp external/nflverse_bundle/addons/derive_roles.py
          runp external/nflverse_bundle/addons/derive_rb_metrics.py
          runp external/nflverse_bundle/addons/fetch_injuries_espn.py

      # -----------------------------
      # COMPOSE (call whichever make_all exists)
      # -----------------------------
      - name: Compose bundle (team_form / player_form)
        shell: bash
        run: |
          set -euo pipefail
          echo "[make_all] seasons=[${SEASON}] strict=${STRICT}"

          if [ -f make_all.py ]; then
            echo "Found: ./make_all.py"
            python make_all.py --season "${SEASON}" --strict "${STRICT}"

          elif [ -f nflverse_csv_fetcher/make_all.py ]; then
            echo "Found: nflverse_csv_fetcher/make_all.py"
            python nflverse_csv_fetcher/make_all.py --season "${SEASON}" --strict "${STRICT}"

          elif [ -f external/nflverse_bundle/make_all.py ]; then
            echo "Found: external/nflverse_bundle/make_all.py"
            python external/nflverse_bundle/make_all.py --season "${SEASON}" --strict "${STRICT}"

          else
            echo "::error ::make_all.py not found in ./, nflverse_csv_fetcher/, OR external/nflverse_bundle/"
            exit 1
          fi

      # -----------------------------
      # VALIDATE OUTPUTS (optional)
      # -----------------------------
      - name: Validate data pack outputs
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/validate_inputs.py ]; then
            python scripts/validate_inputs.py
          else
            echo "::warning::No validator found at scripts/validate_inputs.py; skipping validation."
          fi

      # -----------------------------
      # ZIP OUTPUTS (artifact)
      # -----------------------------
      - name: Pack outputs artifact
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p _artifacts
          (tar -czf _artifacts/outputs.tgz outputs || true)
          (tar -czf _artifacts/data.tgz data || true)
          (tar -czf _artifacts/external-outputs.tgz external/nflverse_bundle/outputs || true)

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: data-pack-${{ github.run_id }}
          path: _artifacts
          if-no-files-found: warn
